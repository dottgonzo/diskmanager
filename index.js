var execSync = require("sync-exec");
module.exports = function (device) {
    var cmd;
    if (device) {
        cmd = "fdisk " + device + " -l";
    }
    else {
        cmd = "fdisk -l";
    }
    var fdi = execSync(cmd).stdout.split("\n");
    var disks = [];
    for (var i = 0; i < fdi.length; i++) {
        var line = fdi[i].replace(/ +(?= )/g, "").split(" ");
        if (fdi[i].split("/dev/s").length > 1 && fdi[i].split("isk").length > 1) {
            var disk = line[1].replace(":", "");
            var sectors = parseInt(line[6]);
            var size = parseInt(line[4]);
            disks.push({ disk: disk, sectors: sectors, size: size, partitions: [] });
        }
        else if (fdi[i].split("/dev/s").length > 1 && line.length > 1) {
            var partition = line[0];
            var boot = void 0;
            var sector_start = void 0;
            var sector_stop = void 0;
            var sectors = void 0;
            var type = "";
            var typeId = void 0;
            if (line[1] == "*") {
                boot = true;
                sector_start = parseInt(line[2]);
                sector_stop = parseInt(line[3]);
                sectors = parseInt(line[4]);
                typeId = parseInt(line[6]);
                for (var l = 7; l < line.length; l++) {
                    if (l == line.length - 1) {
                        type = type + line[l];
                    }
                    else {
                        type = type + line[l] + " ";
                    }
                }
            }
            else {
                boot = false;
                sector_start = parseInt(line[1]);
                sector_stop = parseInt(line[2]);
                sectors = parseInt(line[3]);
                typeId = parseInt(line[5]);
                for (var l = 6; l < line.length; l++) {
                    if (l == line.length - 1) {
                        type = type + line[l];
                    }
                    else {
                        type = type + line[l] + " ";
                    }
                }
            }
            var size = disks[disks.length - 1].block * sectors;
            disks[disks.length - 1].partitions.push({ partition: partition, sectors_start: sector_start, sectors_stop: sector_stop, sectors: sectors, size: size, type: type, boot: boot });
        }
        else if (disks[0] && line[0] == "Units:") {
            disks[disks.length - 1].block = line[5];
        }
    }
    return disks;
};

//# sourceMappingURL=data:application/json;base64,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LENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUNoQyxDQUFDO2dCQUVMLENBQUM7WUFFTCxDQUFDO1lBQ0QsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztZQUNuRCxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEwsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5sZXQgZXhlY1N5bmMgPSByZXF1aXJlKFwic3luYy1leGVjXCIpO1xuZXhwb3J0ID0gZnVuY3Rpb24oZGV2aWNlPzogc3RyaW5nKSB7XG4gICAgbGV0IGNtZDtcbiAgICBpZiAoZGV2aWNlKSB7XG4gICAgICAgIGNtZCA9IFwiZmRpc2sgXCIgKyBkZXZpY2UgKyBcIiAtbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNtZCA9IFwiZmRpc2sgLWxcIjtcbiAgICB9XG4gICAgdmFyIGZkaSA9IGV4ZWNTeW5jKGNtZCkuc3Rkb3V0LnNwbGl0KFwiXFxuXCIpO1xuICAgIGxldCBkaXNrcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmRpLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBsaW5lID0gZmRpW2ldLnJlcGxhY2UoLyArKD89ICkvZywgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgICAgICBpZiAoZmRpW2ldLnNwbGl0KFwiL2Rldi9zXCIpLmxlbmd0aCA+IDEgJiYgZmRpW2ldLnNwbGl0KFwiaXNrXCIpLmxlbmd0aCA+IDEpIHtcblxuICAgICAgICAgICAgbGV0IGRpc2sgPSBsaW5lWzFdLnJlcGxhY2UoXCI6XCIsIFwiXCIpO1xuICAgICAgICAgICAgbGV0IHNlY3RvcnMgPSBwYXJzZUludChsaW5lWzZdKTtcbiAgICAgICAgICAgIGxldCBzaXplID0gcGFyc2VJbnQobGluZVs0XSk7XG4gICAgICAgICAgICBkaXNrcy5wdXNoKHsgZGlzazogZGlzaywgc2VjdG9yczogc2VjdG9ycywgc2l6ZTogc2l6ZSwgcGFydGl0aW9uczogW10gfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmRpW2ldLnNwbGl0KFwiL2Rldi9zXCIpLmxlbmd0aCA+IDEgJiYgbGluZS5sZW5ndGggPiAxKSB7XG5cblxuICAgICAgICAgICAgbGV0IHBhcnRpdGlvbiA9IGxpbmVbMF07XG4gICAgICAgICAgICBsZXQgYm9vdDtcbiAgICAgICAgICAgIGxldCBzZWN0b3Jfc3RhcnQ7XG4gICAgICAgICAgICBsZXQgc2VjdG9yX3N0b3A7XG4gICAgICAgICAgICBsZXQgc2VjdG9ycztcblxuICAgICAgICAgICAgbGV0IHR5cGUgPSBcIlwiO1xuICAgICAgICAgICAgbGV0IHR5cGVJZDtcblxuICAgICAgICAgICAgaWYgKGxpbmVbMV0gPT0gXCIqXCIpIHtcbiAgICAgICAgICAgICAgICBib290ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZWN0b3Jfc3RhcnQgPSBwYXJzZUludChsaW5lWzJdKTtcbiAgICAgICAgICAgICAgICBzZWN0b3Jfc3RvcCA9IHBhcnNlSW50KGxpbmVbM10pO1xuICAgICAgICAgICAgICAgIHNlY3RvcnMgPSBwYXJzZUludChsaW5lWzRdKTtcbiAgICAgICAgICAgICAgICB0eXBlSWQgPSBwYXJzZUludChsaW5lWzZdKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gNzsgbCA8IGxpbmUubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwgPT0gbGluZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gdHlwZSArIGxpbmVbbF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gdHlwZSArIGxpbmVbbF0gKyBcIiBcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib290ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2VjdG9yX3N0YXJ0ID0gcGFyc2VJbnQobGluZVsxXSk7XG4gICAgICAgICAgICAgICAgc2VjdG9yX3N0b3AgPSBwYXJzZUludChsaW5lWzJdKTtcbiAgICAgICAgICAgICAgICBzZWN0b3JzID0gcGFyc2VJbnQobGluZVszXSk7XG4gICAgICAgICAgICAgICAgdHlwZUlkID0gcGFyc2VJbnQobGluZVs1XSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDY7IGwgPCBsaW5lLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsID09IGxpbmUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGUgKyBsaW5lW2xdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9IHR5cGUgKyBsaW5lW2xdICsgXCIgXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHNpemUgPSBkaXNrc1tkaXNrcy5sZW5ndGggLSAxXS5ibG9jayAqIHNlY3RvcnM7XG4gICAgICAgICAgICBkaXNrc1tkaXNrcy5sZW5ndGggLSAxXS5wYXJ0aXRpb25zLnB1c2goeyBwYXJ0aXRpb246IHBhcnRpdGlvbiwgc2VjdG9yc19zdGFydDogc2VjdG9yX3N0YXJ0LCBzZWN0b3JzX3N0b3A6IHNlY3Rvcl9zdG9wLCBzZWN0b3JzOiBzZWN0b3JzLCBzaXplOiBzaXplLCB0eXBlOiB0eXBlLCBib290OiBib290IH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGRpc2tzWzBdICYmIGxpbmVbMF0gPT0gXCJVbml0czpcIikge1xuICAgICAgICAgICAgZGlza3NbZGlza3MubGVuZ3RoIC0gMV0uYmxvY2sgPSBsaW5lWzVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaXNrcztcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
