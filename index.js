var execSync = require("sync-exec");
module.exports = {
    device: function (device) {
        var cmd = "fdisk " + device + " -l";
        var fdi = execSync(cmd).stdout.split("\n");
        var disks = [];
        for (var i = 0; i < fdi.length; i++) {
            var line = fdi[i].replace(/ +(?= )/g, "").split(" ");
            if (fdi[i].split("/dev/ram").length < 2 && fdi[i].split("isk /").length > 1) {
                var disk = line[1].replace(":", "");
                var sectors = parseInt(line[6]);
                var size = parseInt(line[4]);
                disks.push({ disk: disk, sectors: sectors, size: size, partitions: [], block: 512, used_blocks: null });
            }
            else if (disks[0] && fdi[i].split(":").length < 2 && fdi[i].split("dev/").length > 1 && line.length > 1) {
                var partition = line[0];
                var boot = void 0;
                var sector_start = void 0;
                var sector_stop = void 0;
                var sectors = void 0;
                var type = "";
                var typeId = void 0;
                if (line[1] === "*") {
                    boot = true;
                    sector_start = parseInt(line[2]);
                    sector_stop = parseInt(line[3]);
                    sectors = parseInt(line[4]);
                    typeId = parseInt(line[6]);
                    for (var l = 7; l < line.length; l++) {
                        if (l === line.length - 1) {
                            type = type + line[l];
                        }
                        else {
                            type = type + line[l] + " ";
                        }
                    }
                }
                else {
                    boot = false;
                    sector_start = parseInt(line[1]);
                    sector_stop = parseInt(line[2]);
                    sectors = parseInt(line[3]);
                    typeId = parseInt(line[5]);
                    for (var l = 6; l < line.length; l++) {
                        if (l === line.length - 1) {
                            type = type + line[l];
                        }
                        else {
                            type = type + line[l] + " ";
                        }
                    }
                }
                var size = disks[disks.length - 1].block * sectors;
                disks[disks.length - 1].partitions.push({ partition: partition, sectors_start: sector_start, sectors_stop: sector_stop, sectors: sectors, size: size, type: type, boot: boot });
            }
            else if (disks[0] && line[0] === "Units:") {
                disks[disks.length - 1].block = parseInt(line[5]);
            }
        }
        disks[0].used_blocks = disks[0].partitions[disks[0].partitions.length - 1].sectors_stop;
        return disks[0];
    },
    all: function () {
        var cmd = "fdisk -l";
        var fdi = execSync(cmd).stdout.split("\n");
        var disks = [];
        for (var i = 0; i < fdi.length; i++) {
            var line = fdi[i].replace(/ +(?= )/g, "").split(" ");
            if (fdi[i].split("/dev/ram").length < 2 && fdi[i].split("isk /").length > 1) {
                var disk = line[1].replace(":", "");
                var sectors = parseInt(line[6]);
                var size = parseInt(line[4]);
                disks.push({ disk: disk, sectors: sectors, size: size, partitions: [], block: 512, used_blocks: null });
            }
            else if (disks[0] && fdi[i].split(":").length < 2 && fdi[i].split("dev/").length > 1 && line.length > 1) {
                var partition = line[0];
                var boot = void 0;
                var sector_start = void 0;
                var sector_stop = void 0;
                var sectors = void 0;
                var type = "";
                var typeId = void 0;
                if (line[1] === "*") {
                    boot = true;
                    sector_start = parseInt(line[2]);
                    sector_stop = parseInt(line[3]);
                    sectors = parseInt(line[4]);
                    typeId = parseInt(line[6]);
                    for (var l = 7; l < line.length; l++) {
                        if (l === line.length - 1) {
                            type = type + line[l];
                        }
                        else {
                            type = type + line[l] + " ";
                        }
                    }
                }
                else {
                    boot = false;
                    sector_start = parseInt(line[1]);
                    sector_stop = parseInt(line[2]);
                    sectors = parseInt(line[3]);
                    typeId = parseInt(line[5]);
                    for (var l = 6; l < line.length; l++) {
                        if (l === line.length - 1) {
                            type = type + line[l];
                        }
                        else {
                            type = type + line[l] + " ";
                        }
                    }
                }
                var size = disks[disks.length - 1].block * sectors;
                disks[disks.length - 1].partitions.push({ partition: partition, sectors_start: sector_start, sectors_stop: sector_stop, sectors: sectors, size: size, type: type, boot: boot });
            }
            else if (disks[0] && line[0] === "Units:") {
                disks[disks.length - 1].block = parseInt(line[5]);
            }
        }
        for (var i = 0; i < disks.length; i++) {
            if (disks[i].partitions.length > 0) {
                disks[i].used_blocks = disks[i].partitions[disks[i].partitions.length - 1].sectors_stop;
            }
        }
        return disks;
    }
};

//# sourceMappingURL=data:application/json;base64,
